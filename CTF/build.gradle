apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'me.tatarka.retrolambda'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}


tasks.whenTaskAdded { task ->
    if (task.name == "lint") {
        task.enabled = false
    } else if (task.name == "lintVitalRelease") {
        task.enabled = false
    }
}

android {
    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS

    defaultConfig {
        applicationId "${project.APP_GROUP}." + project.APP_ID.toLowerCase()
        minSdkVersion Integer.parseInt(project.MIN_SDK)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent,
                    "CTF-Android-${variant.buildType.name}.apk")
        }
    }

    signingConfigs {
        test {
            storeFile file("../files/test.keystore")
            storePassword "testkey"
            keyAlias "testKey"
            keyPassword "testkey"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "string", "authenticator_account_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".debug.StudentAccount"
            resValue "string", "authenticator_token_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".debug.TepidToken"
            resValue "string", "app_name", "CTF Debug"
        }
        releaseTest { //just like release, but with our test keys
            applicationIdSuffix ".test"
            signingConfig signingConfigs.test
            versionNameSuffix "-test"
            resValue "string", "authenticator_account_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".test.StudentAccount"
            resValue "string", "authenticator_token_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".test.TepidToken"
            resValue "string", "app_name", "CTF Test"
        }
        release {
            minifyEnabled false
            resValue "string", "app_name", "CTF"
            resValue "string", "authenticator_account_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".StudentAccount"
            resValue "string", "authenticator_token_type", "${project.APP_GROUP}." + project.APP_ID.toLowerCase() + ".TepidToken"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    //Framework lib with android support libraries and eventbus
    compile('ca.allanwang:capsule:5b5eed13b7@aar') {
        transitive = true;
    }

    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //compile 'com.lapism:searchview:4.0'
    compile 'com.github.AllanWang:SearchView:d24ad07b9b'

    //Butterknife
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //starting new dependency model
    compile "io.reactivex.rxjava2:rxjava:2.0.7"
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    compile 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'

    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    compile 'com.facebook.stetho:stetho-okhttp3:1.4.2'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

dokka {
    includes = ['README.md']

    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/CTFMcGill/CTF-Android/tree/master/app/src/main/kotlin"
        suffix = "#L"
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}